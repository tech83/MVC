//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERPOLD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ERPOldEntities : DbContext
    {
        public ERPOldEntities()
            : base("name=ERPOldEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TBACCOUNTMASTER> TBACCOUNTMASTERs { get; set; }
        public virtual DbSet<TBACCOUNTTYPEMASTER> TBACCOUNTTYPEMASTERs { get; set; }
        public virtual DbSet<TBBALANCESHEETGROUP> TBBALANCESHEETGROUPs { get; set; }
        public virtual DbSet<TBCASHPAYMENT> TBCASHPAYMENTs { get; set; }
        public virtual DbSet<TBCASHRECEIPT> TBCASHRECEIPTs { get; set; }
        public virtual DbSet<TBCHEQUERECEIPT> TBCHEQUERECEIPTs { get; set; }
        public virtual DbSet<TBCHQPAYMENT> TBCHQPAYMENTs { get; set; }
        public virtual DbSet<TBCREDIT> TBCREDITs { get; set; }
        public virtual DbSet<TBCUSTOMER> TBCUSTOMERs { get; set; }
        public virtual DbSet<TBDEBIT> TBDEBITs { get; set; }
        public virtual DbSet<TBITEMMASTERDETAIL> TBITEMMASTERDETAILs { get; set; }
        public virtual DbSet<TBITEMMASTERHEADER> TBITEMMASTERHEADERs { get; set; }
        public virtual DbSet<TblBrand> TblBrands { get; set; }
        public virtual DbSet<TblItemGroup> TblItemGroups { get; set; }
        public virtual DbSet<TblSizeMaster> TblSizeMasters { get; set; }
        public virtual DbSet<TBPURCHASEDETAIL> TBPURCHASEDETAILS { get; set; }
        public virtual DbSet<TBPURCHASEHEADER> TBPURCHASEHEADERs { get; set; }
        public virtual DbSet<TBSALE> TBSALEs { get; set; }
        public virtual DbSet<TBSALEDETAIL> TBSALEDETAILs { get; set; }
        public virtual DbSet<TBSALEHEADER> TBSALEHEADERs { get; set; }
        public virtual DbSet<TBSTOCK> TBSTOCKs { get; set; }
        public virtual DbSet<TBTAXCONFIG> TBTAXCONFIGs { get; set; }
        public virtual DbSet<CashReceipt> CashReceipts { get; set; }
        public virtual DbSet<ledger> ledgers { get; set; }
    
        public virtual ObjectResult<accountLedgers_Result> accountLedgers(Nullable<int> aCCOUNTID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var aCCOUNTIDParameter = aCCOUNTID.HasValue ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<accountLedgers_Result>("accountLedgers", aCCOUNTIDParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual int pr_InsertBrand(string brandName)
        {
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_InsertBrand", brandNameParameter);
        }
    
        public virtual int pr_InsertItem(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_InsertItem", nameParameter);
        }
    
        public virtual int pr_InsertSizeMaster(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_InsertSizeMaster", nameParameter);
        }
    
        public virtual int pr_insertTBACCOUNTMASTER(Nullable<int> aCCOUNTID, Nullable<int> aCCOUNTTYPEID, Nullable<decimal> oPENINGBALANCE, string oPENINGTYPE, Nullable<int> bSIDPOSITIVE, Nullable<int> bSIDNEGATIVE, string aDDRESS1, string aDDRESS2, string aDDRESS3, string eMAIL, string tINNO, string mOBILENO)
        {
            var aCCOUNTIDParameter = aCCOUNTID.HasValue ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(int));
    
            var aCCOUNTTYPEIDParameter = aCCOUNTTYPEID.HasValue ?
                new ObjectParameter("ACCOUNTTYPEID", aCCOUNTTYPEID) :
                new ObjectParameter("ACCOUNTTYPEID", typeof(int));
    
            var oPENINGBALANCEParameter = oPENINGBALANCE.HasValue ?
                new ObjectParameter("OPENINGBALANCE", oPENINGBALANCE) :
                new ObjectParameter("OPENINGBALANCE", typeof(decimal));
    
            var oPENINGTYPEParameter = oPENINGTYPE != null ?
                new ObjectParameter("OPENINGTYPE", oPENINGTYPE) :
                new ObjectParameter("OPENINGTYPE", typeof(string));
    
            var bSIDPOSITIVEParameter = bSIDPOSITIVE.HasValue ?
                new ObjectParameter("BSIDPOSITIVE", bSIDPOSITIVE) :
                new ObjectParameter("BSIDPOSITIVE", typeof(int));
    
            var bSIDNEGATIVEParameter = bSIDNEGATIVE.HasValue ?
                new ObjectParameter("BSIDNEGATIVE", bSIDNEGATIVE) :
                new ObjectParameter("BSIDNEGATIVE", typeof(int));
    
            var aDDRESS1Parameter = aDDRESS1 != null ?
                new ObjectParameter("ADDRESS1", aDDRESS1) :
                new ObjectParameter("ADDRESS1", typeof(string));
    
            var aDDRESS2Parameter = aDDRESS2 != null ?
                new ObjectParameter("ADDRESS2", aDDRESS2) :
                new ObjectParameter("ADDRESS2", typeof(string));
    
            var aDDRESS3Parameter = aDDRESS3 != null ?
                new ObjectParameter("ADDRESS3", aDDRESS3) :
                new ObjectParameter("ADDRESS3", typeof(string));
    
            var eMAILParameter = eMAIL != null ?
                new ObjectParameter("EMAIL", eMAIL) :
                new ObjectParameter("EMAIL", typeof(string));
    
            var tINNOParameter = tINNO != null ?
                new ObjectParameter("TINNO", tINNO) :
                new ObjectParameter("TINNO", typeof(string));
    
            var mOBILENOParameter = mOBILENO != null ?
                new ObjectParameter("MOBILENO", mOBILENO) :
                new ObjectParameter("MOBILENO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_insertTBACCOUNTMASTER", aCCOUNTIDParameter, aCCOUNTTYPEIDParameter, oPENINGBALANCEParameter, oPENINGTYPEParameter, bSIDPOSITIVEParameter, bSIDNEGATIVEParameter, aDDRESS1Parameter, aDDRESS2Parameter, aDDRESS3Parameter, eMAILParameter, tINNOParameter, mOBILENOParameter);
        }
    
        public virtual int pr_insertTBACCOUNTTYPEMASTER(Nullable<int> aCCOUNTTYPEID, string aCCOUNTTYPENAME)
        {
            var aCCOUNTTYPEIDParameter = aCCOUNTTYPEID.HasValue ?
                new ObjectParameter("ACCOUNTTYPEID", aCCOUNTTYPEID) :
                new ObjectParameter("ACCOUNTTYPEID", typeof(int));
    
            var aCCOUNTTYPENAMEParameter = aCCOUNTTYPENAME != null ?
                new ObjectParameter("ACCOUNTTYPENAME", aCCOUNTTYPENAME) :
                new ObjectParameter("ACCOUNTTYPENAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_insertTBACCOUNTTYPEMASTER", aCCOUNTTYPEIDParameter, aCCOUNTTYPENAMEParameter);
        }
    
        public virtual int pr_insertTBBALANCESHEETGROUP(Nullable<int> bALANCESHEETGRPID, string bALANCESHEETGROUPNM, string bALANCESHEETGROUPTYPE)
        {
            var bALANCESHEETGRPIDParameter = bALANCESHEETGRPID.HasValue ?
                new ObjectParameter("BALANCESHEETGRPID", bALANCESHEETGRPID) :
                new ObjectParameter("BALANCESHEETGRPID", typeof(int));
    
            var bALANCESHEETGROUPNMParameter = bALANCESHEETGROUPNM != null ?
                new ObjectParameter("BALANCESHEETGROUPNM", bALANCESHEETGROUPNM) :
                new ObjectParameter("BALANCESHEETGROUPNM", typeof(string));
    
            var bALANCESHEETGROUPTYPEParameter = bALANCESHEETGROUPTYPE != null ?
                new ObjectParameter("BALANCESHEETGROUPTYPE", bALANCESHEETGROUPTYPE) :
                new ObjectParameter("BALANCESHEETGROUPTYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_insertTBBALANCESHEETGROUP", bALANCESHEETGRPIDParameter, bALANCESHEETGROUPNMParameter, bALANCESHEETGROUPTYPEParameter);
        }
    
        public virtual int pr_updateBrand(string brandName, Nullable<int> brandId)
        {
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_updateBrand", brandNameParameter, brandIdParameter);
        }
    
        public virtual int pr_updateItemGroup(string name, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_updateItemGroup", nameParameter, idParameter);
        }
    
        public virtual int pr_updateSizeMaster(string name, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_updateSizeMaster", nameParameter, idParameter);
        }
    
        public virtual ObjectResult<SaleRegisterSummary_Result> SaleRegisterSummary(Nullable<int> accountid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleRegisterSummary_Result>("SaleRegisterSummary", accountidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<STOCKREPORT_Result> STOCKREPORT(Nullable<int> iTEMID, Nullable<int> sIZEID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var iTEMIDParameter = iTEMID.HasValue ?
                new ObjectParameter("ITEMID", iTEMID) :
                new ObjectParameter("ITEMID", typeof(int));
    
            var sIZEIDParameter = sIZEID.HasValue ?
                new ObjectParameter("SIZEID", sIZEID) :
                new ObjectParameter("SIZEID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STOCKREPORT_Result>("STOCKREPORT", iTEMIDParameter, sIZEIDParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<trialbalance_Result> trialbalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<trialbalance_Result>("trialbalance");
        }
    
        public virtual ObjectResult<trialbalancereport_Result> trialbalancereport(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<trialbalancereport_Result>("trialbalancereport", idParameter);
        }
    
        public virtual ObjectResult<tradingAcc_Result> tradingAcc(Nullable<int> aCCOUNTID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var aCCOUNTIDParameter = aCCOUNTID.HasValue ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tradingAcc_Result>("tradingAcc", aCCOUNTIDParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual ObjectResult<tradingAccExp_Result> tradingAccExp(Nullable<int> aCCOUNTID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var aCCOUNTIDParameter = aCCOUNTID.HasValue ?
                new ObjectParameter("ACCOUNTID", aCCOUNTID) :
                new ObjectParameter("ACCOUNTID", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tradingAccExp_Result>("tradingAccExp", aCCOUNTIDParameter, fROMDATEParameter, tODATEParameter);
        }
    }
}
